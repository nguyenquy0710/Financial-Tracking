<%- include('partials/header', { title: 'L∆∞∆°ng' , additionalCSS: ['/css/dashboard.css'] }) %>
  <div class="app-container">
    <!-- Sidebar Navigation -->
    <aside class="sidebar">
      <div class="logo">
        <h2>üí∞ FinTrack</h2>
      </div>
      <nav class="nav-menu">
        <a href="/dashboard" class="nav-item">
          <span class="icon">üìä</span>
          <span>Dashboard</span>
        </a>
        <a href="/rentals.html" class="nav-item">
          <span class="icon">üè†</span>
          <span>Thu√™ ph√≤ng</span>
        </a>
        <a href="/salaries.html" class="nav-item active">
          <span class="icon">üíµ</span>
          <span>L∆∞∆°ng</span>
        </a>
        <a href="/expenses.html" class="nav-item">
          <span class="icon">üí≥</span>
          <span>Chi ti√™u</span>
        </a>
        <a href="/savings.html" class="nav-item">
          <span class="icon">üè¶</span>
          <span>Ti·∫øt ki·ªám</span>
        </a>
        <a href="/excel.html" class="nav-item">
          <span class="icon">üìÅ</span>
          <span>Excel Import/Export</span>
        </a>
        <a href="/settings.html" class="nav-item">
          <span class="icon">‚öôÔ∏è</span>
          <span>C√†i ƒë·∫∑t</span>
        </a>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
      <header class="top-bar">
        <h1>Qu·∫£n l√Ω l∆∞∆°ng</h1>
        <div class="user-info">
          <span id="user-name">User</span>
          <button class="btn-logout" onclick="logout()">ƒêƒÉng xu·∫•t</button>
        </div>
      </header>

      <div class="content">
        <!-- Summary Cards -->
        <div class="summary-grid">
          <div class="summary-card">
            <div class="card-icon">üí∞</div>
            <div class="card-content">
              <h3>T·ªïng thu nh·∫≠p</h3>
              <p class="amount" id="total-income">0 VND</p>
              <span class="period">T·∫•t c·∫£</span>
            </div>
          </div>
          <div class="summary-card">
            <div class="card-icon">üè¢</div>
            <div class="card-content">
              <h3>L∆∞∆°ng c√¥ng ty</h3>
              <p class="amount" id="company-salary">0 VND</p>
              <span class="period">Trung b√¨nh</span>
            </div>
          </div>
          <div class="summary-card">
            <div class="card-icon">üíº</div>
            <div class="card-content">
              <h3>Freelance</h3>
              <p class="amount" id="freelance-income">0 VND</p>
              <span class="period">Trung b√¨nh</span>
            </div>
          </div>
          <div class="summary-card">
            <div class="card-icon">üìà</div>
            <div class="card-content">
              <h3>TƒÉng tr∆∞·ªüng</h3>
              <p class="amount" id="growth-rate">0%</p>
              <span class="period">So v·ªõi th√°ng tr∆∞·ªõc</span>
            </div>
          </div>
        </div>

        <!-- Salaries List -->
        <div class="card">
          <h2>L·ªãch s·ª≠ l∆∞∆°ng</h2>

          <div id="salaries-list" class="table-container">
            <p class="loading">ƒêang t·∫£i d·ªØ li·ªáu...</p>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="/js/auth.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      await loadSalaries();
    });

    const loadSalaries = async () => {
      const container = document.getElementById('salaries-list');
      container.innerHTML = '<p class="loading">ƒêang t·∫£i...</p>';

      try {
        const response = await apiCall('/salaries');

        if (response.success && response.data) {
          if (response.data.length === 0) {
            container.innerHTML = '<p class="loading">Ch∆∞a c√≥ d·ªØ li·ªáu. Vui l√≤ng import t·ª´ Excel.</p>';
            return;
          }

          // Calculate stats
          const totalIncome = response.data.reduce((sum, s) => sum + (s.totalIncome || 0), 0);
          const avgCompanySalary = response.data.reduce((sum, s) => sum + (s.totalCompanySalary || 0), 0) / response.data.length;
          const avgFreelance = response.data.reduce((sum, s) => sum + (s.freelance?.total || 0), 0) / response.data.length;

          document.getElementById('total-income').textContent = formatCurrency(totalIncome);
          document.getElementById('company-salary').textContent = formatCurrency(avgCompanySalary);
          document.getElementById('freelance-income').textContent = formatCurrency(avgFreelance);

          // Calculate growth
          if (response.data.length >= 2) {
            const latest = response.data[0].totalIncome || 0;
            const previous = response.data[1].totalIncome || 0;
            const growth = previous > 0 ? ((latest - previous) / previous * 100).toFixed(1) : 0;
            document.getElementById('growth-rate').textContent = `${growth}%`;
          }

          // Display table
          container.innerHTML = `
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Th√°ng</th>
                                    <th>C√¥ng ty</th>
                                    <th>L∆∞∆°ng c∆° b·∫£n</th>
                                    <th>KPI</th>
                                    <th>D·ª± √°n</th>
                                    <th>Freelance</th>
                                    <th>T·ªïng thu nh·∫≠p</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${response.data.map(salary => `
                                    <tr>
                                        <td>${new Date(salary.month).toLocaleDateString('vi-VN', { month: '2-digit', year: 'numeric' })}</td>
                                        <td><strong>${salary.company || 'N/A'}</strong></td>
                                        <td>${formatCurrency(salary.baseSalary || 0)}</td>
                                        <td>${formatCurrency(salary.kpi || 0)}</td>
                                        <td>${formatCurrency(salary.project || 0)}</td>
                                        <td>${formatCurrency(salary.freelance?.total || 0)}</td>
                                        <td><strong>${formatCurrency(salary.totalIncome || 0)}</strong></td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
        } else {
          container.innerHTML = '<p class="loading">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu</p>';
        }
      } catch (error) {
        console.error('Failed to load salaries:', error);
        container.innerHTML = '<p class="loading">L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. H√£y import d·ªØ li·ªáu t·ª´ Excel.</p>';
      }
    };

    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(amount);
    };
  </script>

  <style>
    .table-container {
      overflow-x: auto;
    }

    .data-table {
      width: 100%;
      border-collapse: collapse;
    }

    .data-table th,
    .data-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e0e0e0;
    }

    .data-table th {
      background: #f5f7fa;
      font-weight: 600;
      color: #2c3e50;
    }

    .data-table tbody tr:hover {
      background: #f8f9fa;
    }
  </style>
  <%- include('partials/footer', { additionalJS: ['/js/auth.js', '/js/salaries.js' ] }) %>
