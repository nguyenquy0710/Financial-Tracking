const express = require('express');
const router = express.Router();
const misaController = require('../../controllers/misaController');
const auth = require('../../middleware/auth');

/**
 * @swagger
 * tags:
 *   name: MISA
 *   description: MISA Money Keeper API integration
 */

/**
 * @swagger
 * /api/misa/login:
 *   post:
 *     summary: üîê ƒêƒÉng nh·∫≠p v√†o MISA Money Keeper
 *     description: ƒêƒÉng nh·∫≠p v√†o MISA Money Keeper ƒë·ªÉ l·∫•y token x√°c th·ª±c cho c√°c API kh√°c.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - UserName
 *               - Password
 *             properties:
 *               UserName:
 *                 type: string
 *                 description: Email/Username ƒëƒÉng nh·∫≠p MISA
 *                 example: username@gmail.com
 *               Password:
 *                 type: string
 *                 description: M·∫≠t kh·∫©u MISA
 *                 example: Password@123
 *     responses:
 *       200:
 *         description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Login successful
 *                 data:
 *                   type: object
 *                   description: D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ MISA API, bao g·ªìm token
 *       400:
 *         description: Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p
 *       401:
 *         description: Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá
 */
router.post('/login', auth, misaController.loginForWeb);

/**
 * @swagger
 * /api/misa/users:
 *   get:
 *     summary: üë§ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng MISA
 *     description: L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng t·ª´ MISA Money Keeper.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *                 example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *     responses:
 *       200:
 *         description: L·∫•y th√¥ng tin th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: User information retrieved successfully
 *                 data:
 *                   type: object
 *       400:
 *         description: Thi·∫øu MISA token
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
 */
router.get('/users', auth, misaController.getUsers);

/**
 * @swagger
 * /api/misa/wallets/accounts:
 *   post:
 *     summary: üí∞ L·∫•y danh s√°ch v√≠/t√†i kho·∫£n
 *     description: L·∫•y danh s√°ch c√°c v√≠ v√† t√†i kho·∫£n t·ª´ MISA Money Keeper.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *               searchText:
 *                 type: string
 *                 description: T√¨m ki·∫øm theo t√™n v√≠/t√†i kho·∫£n
 *                 default: ""
 *               walletType:
 *                 type: number
 *                 nullable: true
 *                 description: Lo·∫°i v√≠ (null = t·∫•t c·∫£)
 *               inActive:
 *                 type: boolean
 *                 nullable: true
 *                 description: L·ªçc theo tr·∫°ng th√°i ho·∫°t ƒë·ªông
 *               excludeReport:
 *                 type: boolean
 *                 nullable: true
 *                 description: Lo·∫°i tr·ª´ b√°o c√°o
 *               skip:
 *                 type: integer
 *                 description: S·ªë b·∫£n ghi b·ªè qua (ph√¢n trang)
 *                 default: 0
 *               take:
 *                 type: integer
 *                 description: S·ªë b·∫£n ghi l·∫•y v·ªÅ
 *                 default: 10
 *     responses:
 *       200:
 *         description: L·∫•y danh s√°ch v√≠ th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Wallet accounts retrieved successfully
 *                 data:
 *                   type: object
 *       400:
 *         description: Thi·∫øu MISA token
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.post('/wallets/accounts', auth, misaController.getWalletAccounts);

/**
 * @swagger
 * /api/misa/wallets/summary:
 *   post:
 *     summary: üìä L·∫•y t·ªïng quan v√≠/t√†i kho·∫£n
 *     description: L·∫•y th√¥ng tin t·ªïng quan v·ªÅ c√°c v√≠ v√† t√†i kho·∫£n t·ª´ MISA Money Keeper.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *               searchText:
 *                 type: string
 *                 description: T√¨m ki·∫øm theo t√™n v√≠/t√†i kho·∫£n
 *                 default: ""
 *               walletType:
 *                 type: number
 *                 nullable: true
 *                 description: Lo·∫°i v√≠ (null = t·∫•t c·∫£)
 *               inActive:
 *                 type: boolean
 *                 nullable: true
 *                 description: L·ªçc theo tr·∫°ng th√°i ho·∫°t ƒë·ªông
 *               excludeReport:
 *                 type: boolean
 *                 nullable: true
 *                 description: Lo·∫°i tr·ª´ b√°o c√°o
 *     responses:
 *       200:
 *         description: L·∫•y t·ªïng quan th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Wallet account summary retrieved successfully
 *                 data:
 *                   type: object
 *       400:
 *         description: Thi·∫øu MISA token
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.post('/wallets/summary', auth, misaController.getWalletAccountSummary);

/**
 * @swagger
 * /api/misa/transactions/addresses:
 *   get:
 *     summary: üìç L·∫•y danh s√°ch ƒë·ªãa ch·ªâ giao d·ªãch
 *     description: L·∫•y danh s√°ch c√°c ƒë·ªãa ch·ªâ giao d·ªãch t·ª´ MISA Money Keeper.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *                 example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *     responses:
 *       200:
 *         description: L·∫•y danh s√°ch ƒë·ªãa ch·ªâ th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Transaction addresses retrieved successfully
 *                 data:
 *                   type: object
 *       400:
 *         description: Thi·∫øu MISA token
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.get('/transactions/addresses', auth, misaController.getTransactionAddresses);

/**
 * @swagger
 * /api/misa/transactions/search:
 *   post:
 *     summary: üîç T√¨m ki·∫øm giao d·ªãch thu/chi
 *     description: T√¨m ki·∫øm v√† l·∫•y danh s√°ch c√°c giao d·ªãch thu nh·∫≠p v√† chi ti√™u t·ª´ MISA Money Keeper.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *               fromDate:
 *                 type: string
 *                 format: date
 *                 description: T·ª´ ng√†y (ISO 8601)
 *                 example: "2024-01-01"
 *               toDate:
 *                 type: string
 *                 format: date
 *                 description: ƒê·∫øn ng√†y (ISO 8601)
 *                 example: "2024-01-31"
 *               transactionType:
 *                 type: integer
 *                 nullable: true
 *                 description: Lo·∫°i giao d·ªãch (0 = chi ti√™u, 1 = thu nh·∫≠p, null = t·∫•t c·∫£)
 *                 example: null
 *               searchText:
 *                 type: string
 *                 description: T√¨m ki·∫øm theo n·ªôi dung giao d·ªãch
 *                 default: ""
 *               walletAccountIds:
 *                 type: array
 *                 items:
 *                   type: string
 *                 nullable: true
 *                 description: Danh s√°ch ID v√≠/t√†i kho·∫£n
 *               categoryIds:
 *                 type: array
 *                 items:
 *                   type: string
 *                 nullable: true
 *                 description: Danh s√°ch ID danh m·ª•c
 *               skip:
 *                 type: integer
 *                 description: S·ªë b·∫£n ghi b·ªè qua (ph√¢n trang)
 *                 default: 0
 *               take:
 *                 type: integer
 *                 description: S·ªë b·∫£n ghi l·∫•y v·ªÅ
 *                 default: 20
 *     responses:
 *       200:
 *         description: T√¨m ki·∫øm giao d·ªãch th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Transactions retrieved successfully
 *                 data:
 *                   type: object
 *       400:
 *         description: Thi·∫øu MISA token
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.post('/transactions/search', auth, misaController.searchTransactions);

/**
 * @swagger
 * /api/misa/transactions/import/income:
 *   post:
 *     summary: üí∞ Import giao d·ªãch thu nh·∫≠p v√†o h·ªá th·ªëng
 *     description: Import c√°c giao d·ªãch thu nh·∫≠p t·ª´ MISA Money Keeper v√†o b·∫£ng Salary c·ªßa FinTrack.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *               - transactions
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *               transactions:
 *                 type: array
 *                 description: Danh s√°ch giao d·ªãch thu nh·∫≠p c·∫ßn import
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       description: ID giao d·ªãch t·ª´ MISA
 *                     transactionDate:
 *                       type: string
 *                       format: date
 *                       description: Ng√†y giao d·ªãch
 *                     amount:
 *                       type: number
 *                       description: S·ªë ti·ªÅn
 *                     note:
 *                       type: string
 *                       description: Ghi ch√∫
 *     responses:
 *       200:
 *         description: Import th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Imported 5 income transactions
 *                 data:
 *                   type: object
 *                   properties:
 *                     imported:
 *                       type: array
 *                       items:
 *                         type: object
 *                     errors:
 *                       type: array
 *                       items:
 *                         type: object
 *       400:
 *         description: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.post('/transactions/import/income', auth, misaController.importIncomeTransactions);

/**
 * @swagger
 * /api/misa/transactions/import/expense:
 *   post:
 *     summary: üí∏ Import giao d·ªãch chi ti√™u v√†o h·ªá th·ªëng
 *     description: Import c√°c giao d·ªãch chi ti√™u t·ª´ MISA Money Keeper v√†o b·∫£ng Expense c·ªßa FinTrack.
 *     tags: [MISA]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - misaToken
 *               - transactions
 *             properties:
 *               misaToken:
 *                 type: string
 *                 description: Token t·ª´ MISA sau khi ƒëƒÉng nh·∫≠p
 *               transactions:
 *                 type: array
 *                 description: Danh s√°ch giao d·ªãch chi ti√™u c·∫ßn import
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       description: ID giao d·ªãch t·ª´ MISA
 *                     transactionDate:
 *                       type: string
 *                       format: date
 *                       description: Ng√†y giao d·ªãch
 *                     amount:
 *                       type: number
 *                       description: S·ªë ti·ªÅn
 *                     category:
 *                       type: object
 *                       properties:
 *                         name:
 *                           type: string
 *                           description: T√™n danh m·ª•c
 *                     note:
 *                       type: string
 *                       description: Ghi ch√∫
 *     responses:
 *       200:
 *         description: Import th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Imported 10 expense transactions
 *                 data:
 *                   type: object
 *                   properties:
 *                     imported:
 *                       type: array
 *                       items:
 *                         type: object
 *                     errors:
 *                       type: array
 *                       items:
 *                         type: object
 *       400:
 *         description: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá
 */
router.post('/transactions/import/expense', auth, misaController.importExpenseTransactions);

module.exports = router;
