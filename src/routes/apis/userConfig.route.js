const express = require('express');
const router = express.Router();
const userConfigController = require('../../controllers/userConfig.controller');
const { apiAuthHandler } = require('../../middleware/authHandler');

/**
 * @swagger
 * tags:
 *   name: UserConfig
 *   description: User configuration management
 */
router.use(apiAuthHandler);

/**
 * @swagger
 * /api/user-config:
 *   get:
 *     summary: üîß L·∫•y c·∫•u h√¨nh ng∆∞·ªùi d√πng
 *     description: L·∫•y c√°c c·∫•u h√¨nh ng∆∞·ªùi d√πng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 *     tags: [UserConfig]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: L·∫•y c·∫•u h√¨nh th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     misa:
 *                       type: object
 *                       properties:
 *                         username:
 *                           type: string
 *                           example: user@example.com
 *                         isConfigured:
 *                           type: boolean
 *                           example: true
 *                         lastValidated:
 *                           type: string
 *                           format: date-time
 *       401:
 *         description: Unauthorized
 */
router.get('/', apiAuthHandler, userConfigController.getUserConfig);

/**
 * @swagger
 * /api/system-config/misa:
 *   post:
 *     summary: üíæ L∆∞u c·∫•u h√¨nh MISA
 *     description: L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p MISA Money Keeper. API s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa th√¥ng tin ƒëƒÉng nh·∫≠p.
 *     tags: [UserConfig]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - username
 *               - password
 *             properties:
 *               username:
 *                 type: string
 *                 description: Email/Username ƒëƒÉng nh·∫≠p MISA
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 description: M·∫≠t kh·∫©u MISA
 *                 example: Password@123
 *     responses:
 *       200:
 *         description: L∆∞u c·∫•u h√¨nh th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: C·∫•u h√¨nh MISA ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng
 *                 data:
 *                   type: object
 *       400:
 *         description: Th√¥ng tin kh√¥ng h·ª£p l·ªá ho·∫∑c ƒëƒÉng nh·∫≠p MISA th·∫•t b·∫°i
 *       401:
 *         description: Unauthorized
 */
router.post('/misa', apiAuthHandler, userConfigController.saveMisaConfig);

/**
 * @swagger
 * /api/system-config/misa/test:
 *   post:
 *     summary: ‚úÖ Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p MISA
 *     description: Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa th√¥ng tin ƒëƒÉng nh·∫≠p MISA m√† kh√¥ng l∆∞u v√†o database
 *     tags: [UserConfig]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - username
 *               - password
 *             properties:
 *               username:
 *                 type: string
 *                 description: Email/Username ƒëƒÉng nh·∫≠p MISA
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 description: M·∫≠t kh·∫©u MISA
 *                 example: Password@123
 *     responses:
 *       200:
 *         description: Th√¥ng tin ƒëƒÉng nh·∫≠p h·ª£p l·ªá
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Th√¥ng tin ƒëƒÉng nh·∫≠p MISA h·ª£p l·ªá
 *                 valid:
 *                   type: boolean
 *                   example: true
 *       400:
 *         description: Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Unauthorized
 */
router.post('/misa/test', apiAuthHandler, userConfigController.testMisaConfig);

/**
 * @swagger
 * /api/system-config/misa:
 *   delete:
 *     summary: üóëÔ∏è X√≥a c·∫•u h√¨nh MISA
 *     description: X√≥a th√¥ng tin ƒëƒÉng nh·∫≠p MISA ƒë√£ l∆∞u
 *     tags: [UserConfig]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: X√≥a c·∫•u h√¨nh th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: ƒê√£ x√≥a c·∫•u h√¨nh MISA
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh MISA
 *       401:
 *         description: Unauthorized
 */
router.delete('/misa', apiAuthHandler, userConfigController.deleteMisaConfig);

module.exports = router;
