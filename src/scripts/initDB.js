require('dotenv').config();
const connectDB = require('../config/database');

/**
 * Initialize the database with default structures and data.
 */
async function initializeDatabase() {
  try {
    console.log('üöÄ Starting database initialization...');

    // Connect to database
    await connectDB();

    // Initialize default categories
    console.log("üöÄ QuyNH: initializeDatabase -> initializeDefaultCategories");
    await (await require('./category.initialize')).initializeDefaultCategories()
      .catch(err => {
        console.error('‚úó Error initializing default categories:', err);
      });

    // Initialize default system configurations
    console.log("üöÄ QuyNH: initializeDatabase -> initializeDefaultSystemConfigs");
    await (await require('./system-config.initialize')).initializeDefaultSystemConfigs()
      .catch(err => {
        console.error('‚úó Error initializing default system configurations:', err);
      });

    // Initialize default user configurations
    // console.log("üöÄ QuyNH: initializeDatabase -> initializeDefaultUserConfigs");
    // await (await require('./user-config.initialize')).initializeDefaultUserConfigs().catch(err => {
    //   console.error('‚úó Error initializing default user configurations:', err);
    // });

    console.log('‚úÖ Database initialization completed successfully!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    process.exit(1);
  }
}

/**
 * Initialize default data for user QuyNH if --data flag is provided in command line arguments.
 */
async function initializeDefaultDataUserQuyNH() {
  try {
    // Initialize default data for user QuyNH
    console.log("üöÄ QuyNH: initializeDatabase -> initializeDefaultDataUserQuyNH");
    await (await require('./data.quynh.initialize')).initializeDefaultDataUserQuyNH()
      .catch(err => {
        console.error('‚úó Error initializing default data for user QuyNH:', err);
      });
  } catch (error) {
    console.error('‚úó Error initializing default data for user QuyNH:', error);
    throw error;
  }
}

// ============================================================================
// Run initialization
initializeDatabase().then(async () => {
  console.log("‚úÖ C·∫•u tr√∫c DB ƒë√£ ƒë∆∞·ª£c t·∫°o.");

  // =============================================================================
  // N·∫øu c√≥ tham s·ªë --data, kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
  // L·∫•y tham s·ªë d√≤ng l·ªánh
  const args = process.argv.slice(2);

  try {
    if (args.includes('--data')) {
      console.log("‚úÖ Ph√°t hi·ªán tham s·ªë --data, ƒëang ch·∫°y v·ªõi d·ªØ li·ªáu m·∫´u...");

      await initializeDefaultDataUserQuyNH().catch(err => {
        console.error('‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u:', err);
        process.exit(1);
      });

      console.log("‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u ho√†n t·∫•t.");
      process.exit(0);
    } else {
      console.log("‚ÑπÔ∏è Kh√¥ng c√≥ tham s·ªë --data, ch·ªâ t·∫°o c·∫•u tr√∫c DB...");
      process.exit(0);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh:', error);
    process.exit(1);
  }

}).catch(err => {
  console.error('‚ùå L·ªói khi t·∫°o c·∫•u tr√∫c DB:', err);
  process.exit(1);
});
